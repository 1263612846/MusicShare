<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
 		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<context:component-scan base-package="neo.common.service"/>
	<context:component-scan base-package="neo.photo.service"/>
	
	
	<!-- JDBC Properties -->
	<context:property-placeholder location="classpath*:jdbc.properties"/>
	<!--<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:jdbc.properties</value>
			</list>
		</property>
	</bean>-->

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 
			<property name="initialSize" value="10" />
			<property name="maxActive" value="50" />
		-->
	</bean>

	<!-- Use JNDI dataSource -->
	<!--
		<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/jdbc/neo"/>
		</bean>
	-->

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="namedParameterJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>

	<bean id="callableStatementTemplate" class="neo.core.common.CallableStatementTemplate">
		<property name="jdbcTemplate" ref="jdbcTemplate" />
	</bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>



	
	<bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
	    <!--  事务拦截器bean需要依赖注入一个事务管理器 -->
        <property name="transactionManager" ref="transactionManager"/>
    	<property name="transactionAttributes">
		    <!--  下面定义事务传播属性-->
		    <props>
			    <prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
			    <prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
			    <prop key="search*">PROPAGATION_REQUIRED,readOnly</prop>
		    	<prop key="insert*">PROPAGATION_REQUIRED,-java.lang.Exception</prop>
		    	<prop key="save*">PROPAGATION_REQUIRED,-java.lang.Exception</prop>
		    	<prop key="add*">PROPAGATION_REQUIRED,-java.lang.Exception</prop>
		    	<prop key="update*">PROPAGATION_REQUIRED,-java.lang.Exception</prop>
		    	<prop key="delete*">PROPAGATION_REQUIRED,-java.lang.Exception</prop>
		    	
		    </props>
	    </property>
	</bean>

	<!-- 定义BeanNameAutoProxyCreator-->
    <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
	    <!--  指定对满足哪些bean name的bean自动生成业务代理 -->
	    <property name="beanNames">
            <!--  下面是所有需要自动创建事务代理的bean-->
            <list>
                <!--  此处可增加其他需要自动创建事务代理的bean-->
                <value>userService</value>
              	
            </list>
            
	    </property>
        <!--  下面定义BeanNameAutoProxyCreator所需的事务拦截器-->
        <property name="interceptorNames">
            <list>
                <!-- 此处可增加其他新的Interceptor -->
                <value>transactionInterceptor</value> 
            </list>
        </property>
    </bean>	

	
</beans>

